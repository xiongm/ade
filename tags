!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A	archive/lu/virtual.cpp	/^struct A$/;"	s	file:
ACCESS_TOKEN	archive/tweetsenti/config.py	/^ACCESS_TOKEN = '4266821-BC8xHLpuWqxxuRjuRzNONrPTs5QBTLXoB3OKi7Gtbe'$/;"	v
ACCESS_TOKEN_SECRET	archive/tweetsenti/config.py	/^ACCESS_TOKEN_SECRET = '2jodYvxsmljMNafmiO9PSYxLXUEC4ZnQJNMSBDLWsGIBU'$/;"	v
ADD	archive/simple_order_book/main.cpp	/^  const char * ADD = "add";$/;"	m	namespace:spec	file:
ADD_ORDER_TYPE	archive/top_ten_symbols/main.cpp	/^  constexpr char ADD_ORDER_TYPE = 'A';$/;"	m	namespace:spec	file:
ATM	archive/ts/atm/atm.cpp	/^  ATM(BankAccounts & bank_accounts)$/;"	f	class:ATM
ATM	archive/ts/atm/atm.cpp	/^class ATM {$/;"	c	file:
ATM	archive/ts/atm/main.cpp	/^struct ATM {$/;"	s	class:AccountType	file:
Account	archive/ts/atm/atm.cpp	/^  Account(User &user, Kind kind, int balance)$/;"	f	struct:Account
Account	archive/ts/atm/atm.cpp	/^struct Account {$/;"	s	file:
Account	archive/ts/atm/main.cpp	/^struct Account {$/;"	s	class:AccountType	file:
AccountType	archive/ts/atm/main.cpp	/^enum class AccountType : int {$/;"	c	file:
AddOperator	archive/fl/rpn.cpp	/^struct AddOperator {$/;"	s	file:
B	archive/lu/virtual.cpp	/^struct B : public A$/;"	s	file:
BankAccounts	archive/ts/atm/atm.cpp	/^struct BankAccounts {$/;"	s	file:
Book	archive/top_ten_symbols/main.cpp	/^class Book {$/;"	c	file:
Buy	archive/matching_engine/main.cpp	/^  Buy = 'B',$/;"	m	class:Side	file:
CANCELED_SHARES_LENGTH	archive/top_ten_symbols/main.cpp	/^    constexpr size_t CANCELED_SHARES_LENGTH = 6;$/;"	m	namespace:spec::cancel	file:
CANCELED_SHARES_OFFSET	archive/top_ten_symbols/main.cpp	/^    constexpr size_t CANCELED_SHARES_OFFSET = 21;$/;"	m	namespace:spec::cancel	file:
CHART_WINDOW_SIZE	archive/tweetsenti/config.py	/^CHART_WINDOW_SIZE=50$/;"	v
CHECKING	archive/ts/atm/atm.cpp	/^  enum Kind {CHECKING, SAVING};$/;"	e	enum:Account::Kind	file:
CMAKE_BINARY_DIR	archive/top_ten_symbols/Makefile	/^CMAKE_BINARY_DIR = \/home\/mxiong\/projects\/ade\/archive\/top_ten_symbols$/;"	m
CMAKE_COMMAND	archive/top_ten_symbols/Makefile	/^CMAKE_COMMAND = \/usr\/bin\/cmake$/;"	m
CMAKE_SOURCE_DIR	archive/top_ten_symbols/Makefile	/^CMAKE_SOURCE_DIR = \/home\/mxiong\/projects\/ade\/archive\/top_ten_symbols$/;"	m
CONSUMER_KEY	archive/tweetsenti/config.py	/^CONSUMER_KEY = '5gSPeMdlS9EIUssnRa9OsjIiW'$/;"	v
CONSUMER_SECRET	archive/tweetsenti/config.py	/^CONSUMER_SECRET =  'elYw0TJCchLb2zXAbnhV3EWe3YN6E4kBNHs6bdzyxTH2g5yjvR'$/;"	v
CheckingAccount	archive/ts/atm/main.cpp	/^class CheckingAccount: public Account<CheckingAccount> {$/;"	c	class:AccountType	file:
CompletedNoShippingByDate	archive/orders/python/completed_no_shipping_by_date.py	/^class CompletedNoShippingByDate(object):$/;"	c
Consumer	archive/lu/pub_sub.cpp	/^class Consumer$/;"	c	file:
ControlBlock	archive/lu/pointer.cpp	/^struct ControlBlock {$/;"	s	file:
D	archive/th/tests/test.cpp	/^class D :public Foo<std::string> {};$/;"	c	file:
DELETE	archive/simple_order_book/main.cpp	/^  const char * DELETE = "remove";$/;"	m	namespace:spec	file:
Deposit	archive/ts/atm/atm.cpp	/^  Deposit(int amount)$/;"	f	struct:Deposit
Deposit	archive/ts/atm/atm.cpp	/^struct Deposit : public Transaction {$/;"	s	file:
DepthBook	archive/matching_engine/main.cpp	/^  DepthBook(OnTradeHandler handler)$/;"	f	class:Side::OrderType::DepthBook
DepthBook	archive/matching_engine/main.cpp	/^class DepthBook {$/;"	c	class:Side::OrderType	file:
EQUALS	archive/top_ten_symbols/Makefile	/^EQUALS = =$/;"	m
EXECUTED_SHARES_LENGTH	archive/top_ten_symbols/main.cpp	/^    constexpr size_t EXECUTED_SHARES_LENGTH = 6;$/;"	m	namespace:spec::execute	file:
EXECUTED_SHARES_OFFSET	archive/top_ten_symbols/main.cpp	/^    constexpr size_t EXECUTED_SHARES_OFFSET = 21;$/;"	m	namespace:spec::execute	file:
Event	archive/to/double_dispatch.cpp	/^struct Event {$/;"	s	file:
EventDispatcher	archive/to/double_dispatch.cpp	/^struct EventDispatcher : public Event {$/;"	s	file:
EventHandler	archive/to/double_dispatch.cpp	/^struct EventHandler {$/;"	s	file:
Foo	archive/th/tests/test.cpp	/^    Foo (T t): t_(t) {}$/;"	f	class:Foo
Foo	archive/th/tests/test.cpp	/^    Foo() {}$/;"	f	class:Foo
Foo	archive/th/tests/test.cpp	/^class Foo {$/;"	c	file:
GET	archive/simple_order_book/main.cpp	/^  const char * GET = "get";$/;"	m	namespace:spec	file:
GFD	archive/matching_engine/main.cpp	/^  GFD = 'G',$/;"	m	class:Side::OrderType	file:
Header	archive/th/mars.py	/^class Header(object):$/;"	c
IOC	archive/matching_engine/main.cpp	/^  IOC = 'I'$/;"	m	class:Side::OrderType	file:
Kind	archive/ts/atm/atm.cpp	/^  enum Kind {CHECKING, SAVING};$/;"	g	struct:Account	file:
LineReader	archive/qu/test.cpp	/^class LineReader {$/;"	c	file:
MODIFY	archive/simple_order_book/main.cpp	/^  const char * MODIFY = "modify";$/;"	m	namespace:spec	file:
MSG_TYPE_OFFSET	archive/top_ten_symbols/main.cpp	/^    constexpr size_t MSG_TYPE_OFFSET = 8;$/;"	m	namespace:spec::header	file:
MessageHandler	archive/matching_engine/main.cpp	/^  MessageHandler(DepthBook & book):$/;"	f	class:Side::OrderType::MessageHandler
MessageHandler	archive/matching_engine/main.cpp	/^class MessageHandler {$/;"	c	class:Side::OrderType	file:
MessageHandler	archive/qu/main.cpp	/^  MessageHandler(T & symbol_book):$/;"	f	class:MessageHandler
MessageHandler	archive/qu/main.cpp	/^class MessageHandler {$/;"	c	file:
MessageHandler	archive/qu/test.cpp	/^class MessageHandler : public typename TLineReader<MessageHandler>$/;"	c	file:
MessageHandler	archive/simple_order_book/main.cpp	/^  MessageHandler(OrderBook & book):$/;"	f	class:MessageHandler
MessageHandler	archive/simple_order_book/main.cpp	/^class MessageHandler {$/;"	c	file:
MultiplyOperator	archive/fl/rpn.cpp	/^struct MultiplyOperator {$/;"	s	file:
ORDERID_LENGTH	archive/top_ten_symbols/main.cpp	/^    constexpr size_t ORDERID_LENGTH = 12;$/;"	m	namespace:spec::add	file:
ORDERID_LENGTH	archive/top_ten_symbols/main.cpp	/^    constexpr size_t ORDERID_LENGTH = 12;$/;"	m	namespace:spec::cancel	file:
ORDERID_LENGTH	archive/top_ten_symbols/main.cpp	/^    constexpr size_t ORDERID_LENGTH = 12;$/;"	m	namespace:spec::execute	file:
ORDERID_OFFSET	archive/top_ten_symbols/main.cpp	/^    constexpr size_t ORDERID_OFFSET = 9;$/;"	m	namespace:spec::add	file:
ORDERID_OFFSET	archive/top_ten_symbols/main.cpp	/^    constexpr size_t ORDERID_OFFSET = 9;$/;"	m	namespace:spec::cancel	file:
ORDERID_OFFSET	archive/top_ten_symbols/main.cpp	/^    constexpr size_t ORDERID_OFFSET = 9;$/;"	m	namespace:spec::execute	file:
ORDER_CANCEL_TYPE	archive/top_ten_symbols/main.cpp	/^  constexpr char ORDER_CANCEL_TYPE = 'X';$/;"	m	namespace:spec	file:
ORDER_EXECUTED_TYPE	archive/top_ten_symbols/main.cpp	/^  constexpr char ORDER_EXECUTED_TYPE = 'E';$/;"	m	namespace:spec	file:
Order	archive/orders/python/orders.py	/^Order = namedtuple($/;"	v
OrderBook	archive/simple_order_book/main.cpp	/^class OrderBook {$/;"	c	file:
OrderId_Traits	archive/top_ten_symbols/main.cpp	/^struct OrderId_Traits {$/;"	s	file:
OrderType	archive/matching_engine/main.cpp	/^enum class OrderType: char$/;"	c	class:Side	file:
Orders	archive/orders/python/orders.py	/^class Orders(object):$/;"	c
PLOT_STYLE	archive/tweetsenti/config.py	/^PLOT_STYLE="fivethirtyeight"$/;"	v
PLOT_X_LABEL	archive/tweetsenti/config.py	/^PLOT_X_LABEL="time sequence"$/;"	v
PLOT_Y_LABEL	archive/tweetsenti/config.py	/^PLOT_Y_LABEL="sentiment"$/;"	v
PRICE	archive/simple_order_book/main.cpp	/^    const char *PRICE = "price";$/;"	m	namespace:spec::get_type	file:
Packed	packed.cpp	/^struct __attribute__((packed)) Packed {$/;"	s	file:
PitchMessageHandler	archive/top_ten_symbols/main.cpp	/^  PitchMessageHandler(Book & book):$/;"	f	class:PitchMessageHandler
PitchMessageHandler	archive/top_ten_symbols/main.cpp	/^class PitchMessageHandler {$/;"	c	file:
PriceLevel	archive/matching_engine/main.cpp	/^struct PriceLevel {$/;"	s	class:Side::OrderType	file:
PriceLevel	archive/simple_order_book/main.cpp	/^struct PriceLevel {$/;"	s	file:
Producer	archive/lu/pub_sub.cpp	/^class Producer$/;"	c	file:
RM	archive/top_ten_symbols/Makefile	/^RM = \/usr\/bin\/cmake -E remove -f$/;"	m
RPNProcessor	archive/fl/rpn.cpp	/^class RPNProcessor$/;"	c	file:
Rover	archive/th/mars.py	/^class Rover(object):$/;"	c
SAVING	archive/ts/atm/atm.cpp	/^  enum Kind {CHECKING, SAVING};$/;"	e	enum:Account::Kind	file:
SHARES_LENGTH	archive/top_ten_symbols/main.cpp	/^    constexpr size_t SHARES_LENGTH = 6;$/;"	m	namespace:spec::add	file:
SHARES_LENGTH	archive/top_ten_symbols/main.cpp	/^    constexpr size_t SHARES_LENGTH = 6;$/;"	m	namespace:spec::trade	file:
SHARES_OFFSET	archive/top_ten_symbols/main.cpp	/^    constexpr size_t SHARES_OFFSET = 22;$/;"	m	namespace:spec::add	file:
SHARES_OFFSET	archive/top_ten_symbols/main.cpp	/^    constexpr size_t SHARES_OFFSET = 22;$/;"	m	namespace:spec::trade	file:
SHELL	archive/top_ten_symbols/Makefile	/^SHELL = \/bin\/sh$/;"	m
SIZE	archive/simple_order_book/main.cpp	/^    const char *SIZE = "size";$/;"	m	namespace:spec::get_type	file:
SUBSCRIPTIONS	archive/tweetsenti/config.py	/^SUBSCRIPTIONS=['twitter', 'facebook', 'google', 'travel', 'art', 'music', 'photography', 'love', 'fashion', 'food']$/;"	v
SUFFIXES	archive/top_ten_symbols/Makefile	/^SUFFIXES =$/;"	m
SYMBOL_LENGTH	archive/top_ten_symbols/main.cpp	/^    constexpr size_t SYMBOL_LENGTH = 6;$/;"	m	namespace:spec::add	file:
SYMBOL_LENGTH	archive/top_ten_symbols/main.cpp	/^    constexpr size_t SYMBOL_LENGTH = 6;$/;"	m	namespace:spec::trade	file:
SYMBOL_OFFSET	archive/top_ten_symbols/main.cpp	/^    constexpr size_t SYMBOL_OFFSET = 28;$/;"	m	namespace:spec::add	file:
SYMBOL_OFFSET	archive/top_ten_symbols/main.cpp	/^    constexpr size_t SYMBOL_OFFSET = 28;$/;"	m	namespace:spec::trade	file:
SavingAccount	archive/ts/atm/main.cpp	/^class SavingAccount: public Account<SavingAccount> {$/;"	c	class:AccountType	file:
Sell	archive/matching_engine/main.cpp	/^  Sell = 'S'$/;"	m	class:Side	file:
SentimentGraph	archive/tweetsenti/plot.py	/^class SentimentGraph:$/;"	c
SentimentListener	archive/tweetsenti/sentiment_listener.py	/^class SentimentListener(tweepy.StreamListener):$/;"	c
SentimentPublisher	archive/tweetsenti/messaging.py	/^class SentimentPublisher(SimplePublisher):$/;"	c
SentimentSubscriber	archive/tweetsenti/messaging.py	/^class SentimentSubscriber(SimpleSubscriber):$/;"	c
Shares_Traits	archive/top_ten_symbols/main.cpp	/^struct Shares_Traits {$/;"	s	file:
Side	archive/matching_engine/main.cpp	/^enum class Side: char$/;"	c	file:
SimpleEventHandler	archive/to/double_dispatch.cpp	/^struct SimpleEventHandler : public EventHandler {$/;"	s	file:
SimpleMessagingBase	archive/tweetsenti/messaging.py	/^class SimpleMessagingBase(object):$/;"	c
SimpleOrder	archive/matching_engine/main.cpp	/^  SimpleOrder (OrderId order_id, OrderType order_type, Side side, Price price, Shares shares)$/;"	f	struct:Side::OrderType::SimpleOrder
SimpleOrder	archive/matching_engine/main.cpp	/^struct SimpleOrder {$/;"	s	class:Side::OrderType	file:
SimpleOrder	archive/simple_order_book/main.cpp	/^  SimpleOrder (OrderId order_id, Side side, MicroDollars price, Shares shares)$/;"	f	struct:SimpleOrder
SimpleOrder	archive/simple_order_book/main.cpp	/^struct SimpleOrder {$/;"	s	file:
SimpleOrder	archive/top_ten_symbols/main.cpp	/^  SimpleOrder() {}$/;"	f	struct:SimpleOrder
SimpleOrder	archive/top_ten_symbols/main.cpp	/^  SimpleOrder(Shares shares) {$/;"	f	struct:SimpleOrder
SimpleOrder	archive/top_ten_symbols/main.cpp	/^struct SimpleOrder {$/;"	s	file:
SimpleOrderBook	archive/top_ten_symbols/main.cpp	/^  SimpleOrderBook(const Symbol & symbol)$/;"	f	struct:SimpleOrderBook
SimpleOrderBook	archive/top_ten_symbols/main.cpp	/^struct SimpleOrderBook {$/;"	s	file:
SimplePublisher	archive/tweetsenti/messaging.py	/^class SimplePublisher(SimpleMessagingBase):$/;"	c
SimpleSubscriber	archive/tweetsenti/messaging.py	/^class SimpleSubscriber(SimpleMessagingBase):$/;"	c
Simple_SP	archive/lu/pointer.cpp	/^  Simple_SP()$/;"	f	class:Simple_SP
Simple_SP	archive/lu/pointer.cpp	/^  Simple_SP(T *t) {$/;"	f	class:Simple_SP
Simple_SP	archive/lu/pointer.cpp	/^  Simple_SP(const Simple_SP<T> & rhs)$/;"	f	class:Simple_SP
Simple_SP	archive/lu/pointer.cpp	/^class Simple_SP {$/;"	c	file:
SymbolBook	archive/qu/main.cpp	/^class SymbolBook {$/;"	c	file:
SymbolStats	archive/qu/main.cpp	/^struct SymbolStats {$/;"	s	file:
Symbol_Traits	archive/top_ten_symbols/main.cpp	/^struct Symbol_Traits {$/;"	s	file:
TEST	archive/matching_engine/main.cpp	/^TEST (PriceLevel, basic)$/;"	f	class:Side::OrderType	file:
TEST	archive/matching_engine/main.cpp	/^TEST (SimpleOrder, basic)$/;"	f	class:Side::OrderType	file:
TEST	archive/matching_engine/main.cpp	/^TEST(DepthBook, basic)$/;"	f	class:Side::OrderType	file:
TEST	archive/matching_engine/main.cpp	/^TEST(MessageHandler, basic)$/;"	f	class:Side::OrderType	file:
TEST	archive/qu/main.cpp	/^TEST(MessageHandler, basic)$/;"	f
TEST	archive/simple_order_book/main.cpp	/^TEST(MessageHandler, basic)$/;"	f
TEST	archive/top_ten_symbols/main.cpp	/^TEST (Book, basic)$/;"	f
TEST	archive/top_ten_symbols/main.cpp	/^TEST (SimpleOrder, basic)$/;"	f
TEST	archive/top_ten_symbols/main.cpp	/^TEST (SimpleOrderBook, basic)$/;"	f
TEST	archive/top_ten_symbols/main.cpp	/^TEST (TopVolumesRank, basic)$/;"	f
TEST	archive/top_ten_symbols/main.cpp	/^TEST(PitchMessageHandler, basic)$/;"	f
TRADE_TYPE	archive/top_ten_symbols/main.cpp	/^  constexpr char TRADE_TYPE = 'P';$/;"	m	namespace:spec	file:
Test	archive/lu/pointer.cpp	/^  Test() {$/;"	f	struct:Test
Test	archive/lu/pointer.cpp	/^struct Test{$/;"	s	file:
Test	archive/lu/test.cpp	/^  Test(int i) {$/;"	f	struct:Test
Test	archive/lu/test.cpp	/^struct Test{$/;"	s	file:
Test	archive/th/tests/test.cpp	/^    Test(int i)$/;"	f	class:Test
Test	archive/th/tests/test.cpp	/^class Test{$/;"	c	file:
Test	archive/ts/atm/test.cpp	/^struct Test {$/;"	s	file:
ThatEvent	archive/to/double_dispatch.cpp	/^struct ThatEvent : public EventDispatcher<ThatEvent> {$/;"	s	file:
ThisEvent	archive/to/double_dispatch.cpp	/^struct ThisEvent : public EventDispatcher<ThisEvent> {$/;"	s	file:
TopVolumesRank	archive/top_ten_symbols/main.cpp	/^class TopVolumesRank {$/;"	c	file:
Transaction	archive/ts/atm/atm.cpp	/^struct Transaction {$/;"	s	file:
TwitterClient	archive/tweetsenti/pub.py	/^class TwitterClient(object):$/;"	c
Unpacked	packed.cpp	/^struct Unpacked {$/;"	s	file:
User	archive/ts/atm/atm.cpp	/^  User(string name)$/;"	f	struct:User
User	archive/ts/atm/atm.cpp	/^struct User {$/;"	s	file:
User	archive/ts/atm/main.cpp	/^  User(int id, string name)$/;"	f	struct:AccountType::User
User	archive/ts/atm/main.cpp	/^struct User {$/;"	s	class:AccountType	file:
Withdraw	archive/ts/atm/atm.cpp	/^  Withdraw(int amount)$/;"	f	struct:Withdraw
Withdraw	archive/ts/atm/atm.cpp	/^struct Withdraw : public Transaction {$/;"	s	file:
__init__	archive/orders/python/completed_no_shipping_by_date.py	/^    def __init__(self, log, db):$/;"	m	class:CompletedNoShippingByDate
__init__	archive/orders/python/orders.py	/^    def __init__(self, log, db):$/;"	m	class:Orders
__init__	archive/th/mars.py	/^    def __init__(self, heading):$/;"	m	class:Header
__init__	archive/th/mars.py	/^    def __init__(self, xupper, yupper, x, y, heading):$/;"	m	class:Rover
__init__	archive/tweetsenti/messaging.py	/^    def __init__(self):$/;"	m	class:SimpleMessagingBase
__init__	archive/tweetsenti/messaging.py	/^    def __init__(self, callback):$/;"	m	class:SimpleSubscriber
__init__	archive/tweetsenti/messaging.py	/^    def __init__(self, sentiment_callback):$/;"	m	class:SentimentSubscriber
__init__	archive/tweetsenti/plot.py	/^    def __init__(self):$/;"	m	class:SentimentGraph
__init__	archive/tweetsenti/pub.py	/^    def __init__(self):$/;"	m	class:TwitterClient
__init__	archive/tweetsenti/sentiment_listener.py	/^    def __init__(self, api, sentiment_teller, keywords, callback=None):$/;"	m	class:SentimentListener
_callback	archive/tweetsenti/messaging.py	/^    def _callback(self, ch, method, properties, body):$/;"	m	class:SimpleSubscriber
_delta_map	archive/th/mars.py	/^    _delta_map = {$/;"	v	class:Header
_find_database_ini	archive/orders/python/db_factory.py	/^def _find_database_ini():$/;"	f
_heading_map	archive/th/mars.py	/^    _heading_map = {$/;"	v	class:Header
_heading_seq	archive/th/mars.py	/^    _heading_seq = ['E', 'S', 'W', 'N']$/;"	v	class:Header
_sentiment_callback	archive/tweetsenti/messaging.py	/^    def _sentiment_callback(self, body):$/;"	m	class:SentimentSubscriber
a	packed.cpp	/^  char a;$/;"	m	struct:Packed	file:
a	packed.cpp	/^  char a;$/;"	m	struct:Unpacked	file:
account_number	archive/ts/atm/atm.cpp	/^  int account_number;$/;"	m	struct:Account	file:
accounts	archive/ts/atm/atm.cpp	/^  unordered_set<int> accounts;$/;"	m	struct:User	file:
accounts_	archive/ts/atm/atm.cpp	/^  unordered_map<int, shared_ptr<Account>> accounts_;$/;"	m	struct:BankAccounts	file:
accounts_	archive/ts/atm/main.cpp	/^  unordered_map<AccountType, unique_ptr<Account<typename T>>> accounts_;$/;"	m	struct:AccountType::User	file:
add	archive/qu/main.cpp	/^  void add(Timestamp timestamp, Symbol symbol, Shares shares, Price price) {$/;"	f	class:SymbolBook
add	archive/simple_order_book/main.cpp	/^  void add(OrderId order_id, Side side, Price order_price, Shares shares) {$/;"	f	class:OrderBook
add	archive/simple_order_book/main.cpp	/^  void add(SimpleOrder order) {$/;"	f	struct:PriceLevel
add	archive/top_ten_symbols/main.cpp	/^  namespace add {$/;"	n	namespace:spec	file:
add_account	archive/ts/atm/atm.cpp	/^  int add_account(shared_ptr<Account> account) {$/;"	f	struct:BankAccounts
add_account	archive/ts/atm/main.cpp	/^  void add_account(unique_ptr<Account<typename T>> account) {$/;"	f	struct:AccountType::User
add_order	archive/matching_engine/main.cpp	/^  void add_order(OrderId order_id, Side side, OrderType order_type, Price price, Shares shares) {$/;"	f	class:Side::OrderType::DepthBook
add_order	archive/matching_engine/main.cpp	/^  void add_order(SimpleOrder order) {$/;"	f	struct:Side::OrderType::PriceLevel
add_order	archive/top_ten_symbols/main.cpp	/^  void add_order(OrderId id, Shares shares) {$/;"	f	struct:SimpleOrderBook
add_order	archive/top_ten_symbols/main.cpp	/^  void add_order(OrderId order_id, const Symbol & sym, Shares shares) {$/;"	f	class:Book
add_trade	archive/top_ten_symbols/main.cpp	/^  void add_trade(const Symbol & sym, Shares shares) {$/;"	f	class:Book
amount_	archive/ts/atm/atm.cpp	/^  int amount_;$/;"	m	struct:Deposit	file:
amount_	archive/ts/atm/atm.cpp	/^  int amount_;$/;"	m	struct:Withdraw	file:
average_price	archive/qu/main.cpp	/^  Price average_price() const {$/;"	f	struct:SymbolStats
ax1	archive/tweetsenti/trunk/test_plot.py	/^ax1 = fig.add_subplot(211)$/;"	v
ax2	archive/tweetsenti/trunk/test_plot.py	/^ax2 = fig.add_subplot(212)$/;"	v
b	packed.cpp	/^  uint32_t b;$/;"	m	struct:Packed	file:
b	packed.cpp	/^  uint32_t b;$/;"	m	struct:Unpacked	file:
balance	archive/ts/atm/atm.cpp	/^  int balance;$/;"	m	struct:Account	file:
balance	archive/ts/atm/main.cpp	/^  uint32_t balance() const {$/;"	f	struct:AccountType::Account
balance_	archive/ts/atm/main.cpp	/^  uint32_t balance_ = 0;$/;"	m	struct:AccountType::Account	file:
bank_accounts_	archive/ts/atm/atm.cpp	/^  BankAccounts & bank_accounts_;$/;"	m	class:ATM	file:
bar	archive/to/virtual.cpp	/^class bar : public foo {$/;"	c	file:
bfs	archive/fl/num_of_islands.cpp	/^int bfs(int i, int j, const vector<vector<int>> & grid, vector<vector<int>> & visited) {$/;"	f
bid_levels_	archive/matching_engine/main.cpp	/^  BidSide bid_levels_;$/;"	m	class:Side::OrderType::DepthBook	file:
bid_levels_	archive/simple_order_book/main.cpp	/^  BidSide bid_levels_;$/;"	m	class:OrderBook	file:
book_	archive/matching_engine/main.cpp	/^  DepthBook & book_;$/;"	m	class:Side::OrderType::MessageHandler	file:
book_	archive/qu/main.cpp	/^  T & book_;$/;"	m	class:MessageHandler	file:
book_	archive/simple_order_book/main.cpp	/^  OrderBook & book_;$/;"	m	class:MessageHandler	file:
book_	archive/top_ten_symbols/main.cpp	/^  Book & book_;$/;"	m	class:PitchMessageHandler	file:
book_lookup_	archive/top_ten_symbols/main.cpp	/^  BookLookupTable book_lookup_;$/;"	m	class:Book	file:
build_values	archive/orders/python/orders.py	/^        def build_values(o):$/;"	f	function:Orders.bulk_add
bulk_add	archive/orders/python/orders.py	/^    def bulk_add(self, orders: List[Order]):$/;"	m	class:Orders
c	packed.cpp	/^  char c;$/;"	m	struct:Packed	file:
c	packed.cpp	/^  char c;$/;"	m	struct:Unpacked	file:
cancel	archive/matching_engine/main.cpp	/^  void cancel(Shares canceled_shares) {$/;"	f	struct:Side::OrderType::SimpleOrder
cancel	archive/simple_order_book/main.cpp	/^  void cancel(Shares canceled_shares) {$/;"	f	struct:SimpleOrder
cancel	archive/top_ten_symbols/main.cpp	/^  namespace cancel {$/;"	n	namespace:spec	file:
cancel	archive/top_ten_symbols/main.cpp	/^  void cancel(Shares canceled_shares) {$/;"	f	struct:SimpleOrder
cancel_order	archive/matching_engine/main.cpp	/^  void cancel_order(OrderId order_id) {$/;"	f	class:Side::OrderType::DepthBook
cancel_order	archive/matching_engine/main.cpp	/^  void cancel_order(OrderId order_id) {$/;"	f	struct:Side::OrderType::PriceLevel
cancel_order	archive/top_ten_symbols/main.cpp	/^  void cancel_order(OrderId id, Shares shares) {$/;"	f	struct:SimpleOrderBook
cancel_order	archive/top_ten_symbols/main.cpp	/^  void cancel_order(OrderId order_id, Shares shares) {$/;"	f	class:Book
check_balance	archive/ts/atm/main.cpp	/^  void check_balance(uint32_t amount) {$/;"	f	struct:AccountType::Account	file:
checking	archive/ts/atm/main.cpp	/^  checking = 1,$/;"	m	class:AccountType	file:
cleanup	archive/top_ten_symbols/main.cpp	/^  void cleanup(OrderId id) {$/;"	f	struct:SimpleOrderBook	file:
cleanup_done_orders	archive/matching_engine/main.cpp	/^  void cleanup_done_orders(const std::vector<OrderId> & done_orders) {$/;"	f	class:Side::OrderType::DepthBook	file:
completed_no_shipping_by_date	archive/orders/schema/pre_load.sql	/^CREATE VIEW completed_no_shipping_by_date AS$/;"	V
connect	archive/orders/python/db_factory.py	/^def connect(db_ini):$/;"	f
control_block_	archive/lu/pointer.cpp	/^  ControlBlock<T> *control_block_ = nullptr;$/;"	m	class:Simple_SP	file:
create_completed_no_shipping_by_date	archive/orders/python/db_factory.py	/^def create_completed_no_shipping_by_date(log, db):$/;"	f
create_db_connection	archive/orders/python/db_factory.py	/^def create_db_connection():$/;"	f
create_orders	archive/orders/python/db_factory.py	/^def create_orders(log, db):$/;"	f
curr_user_	archive/ts/atm/main.cpp	/^     User * curr_user_;$/;"	m	struct:AccountType::ATM	file:
current_account_	archive/ts/atm/atm.cpp	/^  int current_account_;$/;"	m	class:ATM	file:
cv	archive/lu/pub_sub.cpp	/^condition_variable cv;$/;"	v
db_	archive/ts/atm/main.cpp	/^     DB & db_;$/;"	m	struct:AccountType::ATM	file:
decode	archive/tweetsenti/utils.py	/^def decode(body):$/;"	f
decre	archive/lu/pointer.cpp	/^  int decre() {$/;"	f	struct:ControlBlock
delta	archive/th/mars.py	/^    def delta(self):$/;"	m	class:Header
deposit	archive/ts/atm/main.cpp	/^  uint32_t deposit(uint32_t amount) {$/;"	f	struct:AccountType::ATM
deposit	archive/ts/atm/main.cpp	/^  uint32_t deposit(uint32_t amount) {$/;"	f	struct:AccountType::Account
depth_of_ask	archive/matching_engine/main.cpp	/^  size_t depth_of_ask() const {$/;"	f	class:Side::OrderType::DepthBook
depth_of_ask	archive/simple_order_book/main.cpp	/^  size_t depth_of_ask() const {$/;"	f	class:OrderBook	file:
depth_of_bid	archive/matching_engine/main.cpp	/^  size_t depth_of_bid() const {$/;"	f	class:Side::OrderType::DepthBook
depth_of_bid	archive/simple_order_book/main.cpp	/^  size_t depth_of_bid() const {$/;"	f	class:OrderBook	file:
derived	archive/qu/test.cpp	/^    Derived * derived() {$/;"	f	class:LineReader	file:
dfs	archive/fl/num_of_islands.cpp	/^void dfs(size_t i, size_t j, const vector<vector<int>> & grid, vector<vector<int>> & visited) {$/;"	f
dfs_area	archive/fl/num_of_islands.cpp	/^int dfs_area(int i, int j, const vector<vector<int>> & grid, vector<vector<int>> & visited) {$/;"	f
do	archive/th/mars.py	/^    def do(self, commands):$/;"	m	class:Rover
done	archive/matching_engine/main.cpp	/^  bool done() const {$/;"	f	struct:Side::OrderType::SimpleOrder
done	archive/simple_order_book/main.cpp	/^  bool done() const {$/;"	f	struct:SimpleOrder
done	archive/top_ten_symbols/main.cpp	/^  bool done() const {$/;"	f	struct:SimpleOrder
dump	archive/qu/main.cpp	/^  std::vector<SymbolStats> dump() const {$/;"	f	class:SymbolBook
dump	archive/top_ten_symbols/main.cpp	/^  std::vector<Info> dump() const {$/;"	f	class:TopVolumesRank
empty	archive/matching_engine/main.cpp	/^  bool empty() const {$/;"	f	struct:Side::OrderType::PriceLevel
empty	archive/simple_order_book/main.cpp	/^  bool empty() const {$/;"	f	struct:PriceLevel
encode	archive/tweetsenti/utils.py	/^def encode(index, senti):$/;"	f
eval	archive/fl/rpn.cpp	/^  int eval(const std::vector<std::string> & notations) {$/;"	f	class:RPNProcessor
execute	archive/lu/pointer.cpp	/^  void execute() {$/;"	f	struct:Test
execute	archive/lu/test.cpp	/^  void execute() {$/;"	f	struct:Test
execute	archive/lu/virtual.cpp	/^  virtual void execute() {$/;"	f	struct:A
execute	archive/matching_engine/main.cpp	/^  void execute(Shares executed_shares) {$/;"	f	struct:Side::OrderType::SimpleOrder
execute	archive/top_ten_symbols/main.cpp	/^  namespace execute {$/;"	n	namespace:spec	file:
execute	archive/top_ten_symbols/main.cpp	/^  void execute(Shares executed_shares) {$/;"	f	struct:SimpleOrder
execute	archive/ts/atm/atm.cpp	/^  virtual void execute(Account & account) {$/;"	f	struct:Withdraw
execute	archive/ts/atm/atm.cpp	/^  void execute(Account & account) {$/;"	f	struct:Deposit
execute	archive/ts/atm/atm.cpp	/^  void execute(Transaction & transaction) {$/;"	f	class:ATM
execute_order	archive/top_ten_symbols/main.cpp	/^  void execute_order(OrderId id, Shares shares) {$/;"	f	struct:SimpleOrderBook
execute_order	archive/top_ten_symbols/main.cpp	/^  void execute_order(OrderId order_id, Shares shares) {$/;"	f	class:Book
exists	archive/matching_engine/main.cpp	/^  bool exists(OrderId order_id) {$/;"	f	class:Side::OrderType::DepthBook
exists	archive/simple_order_book/main.cpp	/^  bool exists(OrderId order_id) {$/;"	f	class:OrderBook
f	archive/to/virtual.cpp	/^  virtual void f() {$/;"	f	class:bar
f	archive/to/virtual.cpp	/^  virtual void f() {$/;"	f	class:foo
fig	archive/tweetsenti/trunk/test_plot.py	/^fig = PLT.figure()$/;"	v
find	archive/top_ten_symbols/main.cpp	/^  typename VolumesRank::const_iterator find(const Symbol & symbol) const {$/;"	f	class:TopVolumesRank	file:
first	archive/th/tests/test.cpp	/^namespace first$/;"	n	file:
foo	archive/to/perfect_forward.cpp	/^void foo(const std::string & s) {$/;"	f
foo	archive/to/perfect_forward.cpp	/^void foo(std::string&& s) {$/;"	f
foo	archive/to/virtual.cpp	/^class foo {$/;"	c	file:
get_account	archive/ts/atm/atm.cpp	/^  Account * get_account(int account_number) {$/;"	f	struct:BankAccounts
get_account	archive/ts/atm/main.cpp	/^     Account * get_account() {$/;"	f	struct:AccountType::ATM	file:
get_account	archive/ts/atm/main.cpp	/^  Account * get_account(AccountType & type) {$/;"	f	struct:AccountType::User
get_all	archive/orders/python/completed_no_shipping_by_date.py	/^    def get_all(self):$/;"	m	class:CompletedNoShippingByDate
get_next_account_number	archive/ts/atm/atm.cpp	/^int get_next_account_number()$/;"	f
get_next_user_id	archive/ts/atm/atm.cpp	/^int get_next_user_id()$/;"	f
get_order_book	archive/top_ten_symbols/main.cpp	/^  SimpleOrderBook::SharedPtr get_order_book(const Symbol & sym) {$/;"	f	class:Book	file:
get_price	archive/simple_order_book/main.cpp	/^  double get_price(char side, int level) {$/;"	f	class:OrderBook
get_size	archive/simple_order_book/main.cpp	/^  int get_size(char side, int level) {$/;"	f	class:OrderBook
get_type	archive/simple_order_book/main.cpp	/^  namespace get_type {$/;"	n	namespace:spec	file:
handle	archive/matching_engine/main.cpp	/^  void handle(const std::string & msg) {$/;"	f	class:Side::OrderType::MessageHandler
handle	archive/qu/main.cpp	/^  void handle(const std::string & msg) {$/;"	f	class:MessageHandler
handle	archive/qu/test.cpp	/^    void handle(std::string & line) {$/;"	f	class:MessageHandler
handle	archive/simple_order_book/main.cpp	/^  void handle(const std::string & msg) {$/;"	f	class:MessageHandler
handle	archive/to/double_dispatch.cpp	/^  void handle(ThatEvent *) {$/;"	f	struct:SimpleEventHandler
handle	archive/to/double_dispatch.cpp	/^  void handle(ThisEvent *) {$/;"	f	struct:SimpleEventHandler
handle	archive/top_ten_symbols/main.cpp	/^  void handle(const char * msg) {$/;"	f	class:PitchMessageHandler
handle_add_order	archive/matching_engine/main.cpp	/^  void handle_add_order(char side, std::istringstream & iss) {$/;"	f	class:Side::OrderType::MessageHandler	file:
handle_add_order	archive/simple_order_book/main.cpp	/^  void handle_add_order(std::istringstream & iss) {$/;"	f	class:MessageHandler	file:
handle_add_order	archive/top_ten_symbols/main.cpp	/^  void handle_add_order(const char * msg) {$/;"	f	class:PitchMessageHandler	file:
handle_cancel_order	archive/matching_engine/main.cpp	/^  void handle_cancel_order(std::istringstream & iss) {$/;"	f	class:Side::OrderType::MessageHandler	file:
handle_get	archive/simple_order_book/main.cpp	/^  void handle_get(std::istringstream & iss) {$/;"	f	class:MessageHandler	file:
handle_modify_order	archive/matching_engine/main.cpp	/^  void handle_modify_order(std::istringstream & iss) {$/;"	f	class:Side::OrderType::MessageHandler	file:
handle_modify_order	archive/simple_order_book/main.cpp	/^  void handle_modify_order(std::istringstream & iss) {$/;"	f	class:MessageHandler	file:
handle_order_cancel	archive/top_ten_symbols/main.cpp	/^  void handle_order_cancel(const char *msg) {$/;"	f	class:PitchMessageHandler	file:
handle_order_executed	archive/top_ten_symbols/main.cpp	/^  void handle_order_executed(const char * msg) {$/;"	f	class:PitchMessageHandler	file:
handle_other	archive/matching_engine/main.cpp	/^  void handle_other() {$/;"	f	class:Side::OrderType::MessageHandler	file:
handle_other	archive/simple_order_book/main.cpp	/^  void handle_other() {$/;"	f	class:MessageHandler	file:
handle_other	archive/top_ten_symbols/main.cpp	/^  void handle_other(const char * ) {$/;"	f	class:PitchMessageHandler	file:
handle_print_book	archive/matching_engine/main.cpp	/^  void handle_print_book() {$/;"	f	class:Side::OrderType::MessageHandler	file:
handle_remove_order	archive/simple_order_book/main.cpp	/^  void handle_remove_order(std::istringstream & iss) {$/;"	f	class:MessageHandler	file:
handle_trade	archive/top_ten_symbols/main.cpp	/^  void handle_trade(const char * msg) {$/;"	f	class:PitchMessageHandler	file:
has	archive/top_ten_symbols/main.cpp	/^  bool has(OrderId id) const {$/;"	f	struct:SimpleOrderBook
header	archive/top_ten_symbols/main.cpp	/^  namespace header {$/;"	n	namespace:spec	file:
i	archive/th/tests/test.cpp	/^int i;$/;"	v
id	archive/ts/atm/atm.cpp	/^  int id;$/;"	m	struct:User	file:
id	archive/ts/atm/main.cpp	/^  int id;$/;"	m	struct:AccountType::User	file:
incre	archive/lu/pointer.cpp	/^  void incre() {$/;"	f	struct:ControlBlock
increment	archive/th/tests/test.cpp	/^void increment(int i) {$/;"	f
integral_constant	archive/lu/is_same.cpp	/^struct integral_constant {$/;"	s	file:
is_buy	archive/matching_engine/main.cpp	/^is_buy(Side s)$/;"	f	class:Side::OrderType	file:
is_buy	archive/simple_order_book/main.cpp	/^is_buy(Side s)$/;"	f
is_crossing_with	archive/matching_engine/main.cpp	/^  bool is_crossing_with(const SimpleOrder & order) {$/;"	f	class:Side::OrderType::DepthBook
is_same	archive/lu/is_same.cpp	/^struct is_same : std::false_type {};$/;"	s	file:
is_same	archive/lu/is_same.cpp	/^struct is_same<T, T> : std::true_type {};$/;"	s	file:
is_supported	archive/fl/rpn.cpp	/^  bool is_supported(char op) {$/;"	f	class:RPNProcessor	file:
is_valid	archive/fl/num_of_islands.cpp	/^int is_valid(int i, int j, const int m, const int n) {$/;"	f
kind	archive/ts/atm/atm.cpp	/^  Kind kind;$/;"	m	struct:Account	file:
last_timestamp	archive/qu/main.cpp	/^  Timestamp last_timestamp = 0;$/;"	m	struct:SymbolStats	file:
level_of_ask	archive/matching_engine/main.cpp	/^  LevelInfo level_of_ask(size_t index) const {$/;"	f	class:Side::OrderType::DepthBook
level_of_ask	archive/simple_order_book/main.cpp	/^  LevelInfo level_of_ask(size_t index) const {$/;"	f	class:OrderBook	file:
level_of_bid	archive/matching_engine/main.cpp	/^  LevelInfo level_of_bid(size_t index) const {$/;"	f	class:Side::OrderType::DepthBook
level_of_bid	archive/simple_order_book/main.cpp	/^  LevelInfo level_of_bid(size_t index) const {$/;"	f	class:OrderBook	file:
log_trade	archive/top_ten_symbols/main.cpp	/^  void log_trade(Shares shares) {$/;"	f	struct:SimpleOrderBook
logged_	archive/ts/atm/main.cpp	/^     bool logged_;$/;"	m	struct:AccountType::ATM	file:
login	archive/ts/atm/atm.cpp	/^  void login(int account_number) {$/;"	f	class:ATM
login	archive/ts/atm/main.cpp	/^  void login(int user_id) {$/;"	f	struct:AccountType::ATM
logout	archive/ts/atm/atm.cpp	/^  void logout() {$/;"	f	class:ATM
lower	archive/th/tests/test.cpp	/^    int lower;$/;"	m	class:Test	file:
m	archive/lu/pub_sub.cpp	/^mutex m;$/;"	v
m_	archive/lu/pointer.cpp	/^  mutex m_;$/;"	m	struct:ControlBlock	file:
main	archive/fl/num_of_islands.cpp	/^int main(int argc, char *argv[])$/;"	f
main	archive/fl/rpn.cpp	/^int main(int argc, char *argv[])$/;"	f
main	archive/lu/bit.cpp	/^int main(int argc, char *argv[])$/;"	f
main	archive/lu/is_same.cpp	/^int main(int argc, char *argv[])$/;"	f
main	archive/lu/pointer.cpp	/^int main(int argc, char *argv[])$/;"	f
main	archive/lu/pub_sub.cpp	/^int main(int argc, char *argv[])$/;"	f
main	archive/lu/test.cpp	/^int main(int argc, char *argv[])$/;"	f
main	archive/lu/virtual.cpp	/^int main(int argc, char *argv[])$/;"	f
main	archive/matching_engine/main.cpp	/^int main(int argc, char * argv[])$/;"	f	class:Side::OrderType	file:
main	archive/orders/python/gen_reports.py	/^def main():$/;"	f
main	archive/orders/python/load_orders.py	/^def main():$/;"	f
main	archive/qu/main.cpp	/^int main(int argc, char * argv[])$/;"	f
main	archive/qu/test.cpp	/^int main(int argc, char *argv[])$/;"	f
main	archive/simple_order_book/main.cpp	/^int main(int argc, char * argv[])$/;"	f
main	archive/th/main.py	/^def main():$/;"	f
main	archive/th/tests/ctest.c	/^int main()$/;"	f
main	archive/th/tests/test.cpp	/^int main(void)$/;"	f
main	archive/to/double_dispatch.cpp	/^int main(int argc, char *argv[])$/;"	f
main	archive/to/perfect_forward.cpp	/^int main(int argc, char *argv[])$/;"	f
main	archive/to/remove_erase.cpp	/^int main(int argc, char *argv[])$/;"	f
main	archive/to/remove_space.cpp	/^int main(int argc, char *argv[])$/;"	f
main	archive/to/segment_length.cpp	/^int main(int argc, char *argv[])$/;"	f
main	archive/to/virtual.cpp	/^int main(int argc, char *argv[])$/;"	f
main	archive/top_ten_symbols/main.cpp	/^int main(int argc, char * argv[])$/;"	f
main	archive/ts/atm/atm.cpp	/^int main(int argc, char *argv[])$/;"	f
main	archive/ts/atm/main.cpp	/^int main(int argc, char *argv[])$/;"	f	class:AccountType	file:
main	archive/ts/atm/test.cpp	/^int main(int argc, char *argv[])$/;"	f
main	archive/tweetsenti/pub.py	/^def main():$/;"	f
main	archive/tweetsenti/sub.py	/^def main():$/;"	f
main	packed.cpp	/^int main(int argc, char *argv[])$/;"	f
map_	archive/qu/main.cpp	/^  mutable SymbolMap map_;$/;"	m	class:SymbolBook	file:
match	archive/matching_engine/main.cpp	/^  DoneOrders match(SimpleOrder &order) {$/;"	f	class:Side::OrderType::DepthBook
match	archive/matching_engine/main.cpp	/^  DoneOrders match(SimpleOrder &order, OnTradeHandler & on_trade) {$/;"	f	struct:Side::OrderType::PriceLevel
max_areas	archive/fl/num_of_islands.cpp	/^int max_areas(const vector<vector<int>> & grid) {$/;"	f
max_areas_dfs	archive/fl/num_of_islands.cpp	/^int max_areas_dfs(const vector<vector<int>> & grid) {$/;"	f
max_price	archive/qu/main.cpp	/^  Price max_price = 0;$/;"	m	struct:SymbolStats	file:
max_time_gap	archive/qu/main.cpp	/^  Timestamp max_time_gap = 0;$/;"	m	struct:SymbolStats	file:
modify	archive/simple_order_book/main.cpp	/^  void modify(OrderId order_id, Shares new_shares) {$/;"	f	class:OrderBook
modify	archive/simple_order_book/main.cpp	/^  void modify(OrderId order_id, Shares new_shares) {$/;"	f	struct:PriceLevel
modify	archive/simple_order_book/main.cpp	/^  void modify(Shares new_shares) {$/;"	f	struct:SimpleOrder
modify_order	archive/matching_engine/main.cpp	/^  void modify_order(OrderId order_id, Side side, Price price, Shares shares) {$/;"	f	class:Side::OrderType::DepthBook
move_forward	archive/th/mars.py	/^    def move_forward(self):$/;"	m	class:Rover
name	archive/ts/atm/atm.cpp	/^  string name;$/;"	m	struct:User	file:
name	archive/ts/atm/main.cpp	/^  string name;$/;"	m	struct:AccountType::User	file:
num_of_islands	archive/fl/num_of_islands.cpp	/^int num_of_islands(const vector<vector<int>> & grid) {$/;"	f
num_of_islands_bfs	archive/fl/num_of_islands.cpp	/^int num_of_islands_bfs(const vector<vector<int>> & grid) {$/;"	f
on_error	archive/tweetsenti/sentiment_listener.py	/^    def on_error(self, error_code):$/;"	m	class:SentimentListener
on_status	archive/tweetsenti/sentiment_listener.py	/^    def on_status(self, status):$/;"	m	class:SentimentListener
on_trade_handler_	archive/matching_engine/main.cpp	/^  OnTradeHandler on_trade_handler_;$/;"	m	class:Side::OrderType::DepthBook	file:
open	archive/top_ten_symbols/main.cpp	/^  void open(Shares opened_shares) {$/;"	f	struct:SimpleOrder
operator ()	archive/fl/rpn.cpp	/^  void operator() (Operands & s) {$/;"	f	struct:AddOperator
operator ()	archive/fl/rpn.cpp	/^  void operator() (Operands & s) {$/;"	f	struct:MultiplyOperator
operator ()	archive/top_ten_symbols/main.cpp	/^    bool operator()(const Info & lhs, const Info & rhs) const {$/;"	f	struct:TopVolumesRank::rank_comp
operator *	archive/lu/pointer.cpp	/^  T & operator*() {$/;"	f	class:Simple_SP
operator ->	archive/lu/pointer.cpp	/^  T * operator->() {$/;"	f	class:Simple_SP
operator <<	archive/matching_engine/main.cpp	/^std::ostream & operator<< (std::ostream & os, const DepthBook & depth_book) {$/;"	f	class:Side::OrderType	file:
operator <<	archive/qu/main.cpp	/^std::ostream & operator<< (std::ostream & os, const SymbolBook & book) {$/;"	f
operator <<	archive/top_ten_symbols/main.cpp	/^std::ostream & operator<< (std::ostream & os, const TopVolumesRank<N> & stats) {$/;"	f
operator <<	packed.cpp	/^std::ostream & operator<<(ostream & os, const Packed msg)$/;"	f
operator <<	packed.cpp	/^std::ostream & operator<<(ostream & os, const Unpacked msg)$/;"	f
operator =	archive/lu/pointer.cpp	/^  Simple_SP<T> &operator=(const Simple_SP<T> & rhs) {$/;"	f	class:Simple_SP
operators_	archive/fl/rpn.cpp	/^  std::unordered_map<char, RPNOperator> operators_;$/;"	m	class:RPNProcessor	file:
order_book_	archive/top_ten_symbols/main.cpp	/^  OrderBook order_book_;$/;"	m	struct:SimpleOrderBook	file:
order_id	archive/matching_engine/main.cpp	/^  OrderId order_id;$/;"	m	struct:Side::OrderType::SimpleOrder	file:
order_id	archive/simple_order_book/main.cpp	/^  OrderId order_id;$/;"	m	struct:SimpleOrder	file:
order_to_price_level_map_	archive/matching_engine/main.cpp	/^  OrderToPriceLevelMap order_to_price_level_map_;$/;"	m	class:Side::OrderType::DepthBook	file:
order_to_price_level_map_	archive/simple_order_book/main.cpp	/^  OrderToPriceLevelMap order_to_price_level_map_;$/;"	m	class:OrderBook	file:
order_type	archive/matching_engine/main.cpp	/^  OrderType order_type;$/;"	m	struct:Side::OrderType::SimpleOrder	file:
ordered_map_	archive/qu/main.cpp	/^  SymbolOrderMap ordered_map_;$/;"	m	class:SymbolBook	file:
orders	archive/orders/schema/pre_load.sql	/^CREATE TABLE orders($/;"	t
orders.CurrencyCode	archive/orders/schema/pre_load.sql	/^, CurrencyCode                  CHAR(3)                        NOT NULL$/;"	F
orders.CurrencyRate	archive/orders/schema/pre_load.sql	/^, CurrencyRate                  NUMERIC                        NOT NULL$/;"	F
orders.CustomerId	archive/orders/schema/pre_load.sql	/^, CustomerId                    INTEGER                        NOT NULL$/;"	F
orders.OrderDateTime	archive/orders/schema/pre_load.sql	/^, OrderDateTime                 TIMESTAMP                      NOT NULL$/;"	F
orders.OrderDiscount	archive/orders/schema/pre_load.sql	/^, OrderDiscount                 NUMERIC                        NOT NULL$/;"	F
orders.OrderId	archive/orders/schema/pre_load.sql	/^CREATE TABLE orders($/;"	F
orders.OrderStatusId	archive/orders/schema/pre_load.sql	/^, OrderStatusId                 SMALLINT                       NOT NULL$/;"	F
orders.OrderSubtotalDiscountExclTax	archive/orders/schema/pre_load.sql	/^, OrderSubtotalDiscountExclTax  NUMERIC                        NOT NULL$/;"	F
orders.OrderSubtotalDiscountInclTax	archive/orders/schema/pre_load.sql	/^, OrderSubtotalDiscountInclTax  NUMERIC                        NOT NULL$/;"	F
orders.OrderSubtotalInclTax	archive/orders/schema/pre_load.sql	/^, OrderSubtotalInclTax          NUMERIC                        NOT NULL$/;"	F
orders.OrderTotal	archive/orders/schema/pre_load.sql	/^, OrderTotal                    NUMERIC                        NOT NULL$/;"	F
orders.PaymentStatusId	archive/orders/schema/pre_load.sql	/^, PaymentStatusId               SMALLINT                       NOT NULL$/;"	F
orders.RefundedAmount	archive/orders/schema/pre_load.sql	/^, RefundedAmount                NUMERIC                        NOT NULL$/;"	F
orders.ShippingStatusId	archive/orders/schema/pre_load.sql	/^, ShippingStatusId              SMALLINT                       NOT NULL$/;"	F
orders.orders_time_stamp_date_idx	archive/orders/schema/post_load.sql	/^CREATE INDEX orders_time_stamp_date_idx ON orders(date(OrderDateTime));$/;"	i
orders_	archive/matching_engine/main.cpp	/^  OrderList orders_;$/;"	m	struct:Side::OrderType::PriceLevel	file:
orders_	archive/simple_order_book/main.cpp	/^  OrderList orders_;$/;"	m	struct:PriceLevel	file:
orders_map_	archive/matching_engine/main.cpp	/^  OrderMap orders_map_;$/;"	m	struct:Side::OrderType::PriceLevel	file:
orders_map_	archive/simple_order_book/main.cpp	/^  OrderMap orders_map_;$/;"	m	struct:PriceLevel	file:
outstanding_shares	archive/top_ten_symbols/main.cpp	/^  Shares outstanding_shares = 0;$/;"	m	struct:SimpleOrder	file:
p_	archive/lu/pointer.cpp	/^  T *p_ = nullptr;$/;"	m	class:Simple_SP	file:
parse	archive/top_ten_symbols/main.cpp	/^parser::parse<OrderId_Traits> (const char * start, size_t length) {$/;"	f	class:parser
parse	archive/top_ten_symbols/main.cpp	/^parser::parse<Shares_Traits> (const char * start, size_t length) {$/;"	f	class:parser
parse	archive/top_ten_symbols/main.cpp	/^parser::parse<Symbol_Traits> (const char * start, size_t length) {$/;"	f	class:parser
parser	archive/top_ten_symbols/main.cpp	/^namespace parser {$/;"	n	file:
payment_status	archive/orders/schema/pre_load.sql	/^CREATE TABLE payment_status($/;"	t
payment_status.Id	archive/orders/schema/pre_load.sql	/^CREATE TABLE payment_status($/;"	F
payment_status.Name	archive/orders/schema/pre_load.sql	/^, Name           VARCHAR(64)                    NOT NULL$/;"	F
pos	archive/th/mars.py	/^    def pos(self):$/;"	m	class:Rover
price	archive/matching_engine/main.cpp	/^  Price price = 0;$/;"	m	struct:Side::OrderType::SimpleOrder	file:
price	archive/simple_order_book/main.cpp	/^  MicroDollars price = 0;$/;"	m	struct:SimpleOrder	file:
publish	archive/tweetsenti/messaging.py	/^    def publish(self, body):$/;"	m	class:SimplePublisher
publish_senti	archive/tweetsenti/messaging.py	/^    def publish_senti(self, index, word, senti):$/;"	m	class:SentimentPublisher
rank_comp	archive/top_ten_symbols/main.cpp	/^  struct rank_comp {$/;"	s	class:TopVolumesRank	file:
ranks_	archive/top_ten_symbols/main.cpp	/^  VolumesRank ranks_;$/;"	m	class:TopVolumesRank	file:
read	archive/lu/pub_sub.cpp	/^  int read() {$/;"	f	class:Consumer
ref_count	archive/lu/pointer.cpp	/^  int ref_count = 0;$/;"	m	struct:ControlBlock	file:
refresh	archive/tweetsenti/plot.py	/^    def refresh(self):$/;"	m	class:SentimentGraph
register_operator	archive/fl/rpn.cpp	/^  void register_operator(char op, RPNOperator func) {$/;"	f	class:RPNProcessor
release_	archive/lu/pointer.cpp	/^  void release_() {$/;"	f	class:Simple_SP	file:
remove	archive/simple_order_book/main.cpp	/^  void remove() {$/;"	f	struct:SimpleOrder
remove	archive/simple_order_book/main.cpp	/^  void remove(OrderId order_id) {$/;"	f	class:OrderBook
remove	archive/simple_order_book/main.cpp	/^  void remove(OrderId order_id) {$/;"	f	struct:PriceLevel
reset	archive/matching_engine/main.cpp	/^  void reset() {$/;"	f	class:Side::OrderType::DepthBook
reset	archive/simple_order_book/main.cpp	/^  void reset() {$/;"	f	class:OrderBook
run	archive/qu/test.cpp	/^    void run() {$/;"	f	class:LineReader
saving	archive/ts/atm/main.cpp	/^  saving = 2$/;"	m	class:AccountType	file:
second	archive/th/tests/test.cpp	/^namespace second$/;"	n	file:
segment_length	archive/to/segment_length.cpp	/^int segment_length(const vector<pair<int, int>> &segments) {$/;"	f
sentiment_teller	archive/tweetsenti/utils.py	/^def sentiment_teller(tweet):$/;"	f
shares	archive/matching_engine/main.cpp	/^  Shares shares = 0;$/;"	m	struct:Side::OrderType::SimpleOrder	file:
shares	archive/simple_order_book/main.cpp	/^  Shares shares = 0;$/;"	m	struct:SimpleOrder	file:
shares	archive/top_ten_symbols/main.cpp	/^  Shares shares = 0;$/;"	m	struct:SimpleOrder	file:
shipping_status	archive/orders/schema/pre_load.sql	/^CREATE TABLE shipping_status($/;"	t
shipping_status.Id	archive/orders/schema/pre_load.sql	/^CREATE TABLE shipping_status($/;"	F
shipping_status.Name	archive/orders/schema/pre_load.sql	/^, Name           VARCHAR(64)                    NOT NULL$/;"	F
side	archive/matching_engine/main.cpp	/^  Side side;$/;"	m	struct:Side::OrderType::SimpleOrder	file:
side	archive/simple_order_book/main.cpp	/^  Side side;$/;"	m	struct:SimpleOrder	file:
size	archive/top_ten_symbols/main.cpp	/^  size_t size() const {$/;"	f	struct:SimpleOrderBook
spec	archive/simple_order_book/main.cpp	/^namespace spec$/;"	n	file:
spec	archive/top_ten_symbols/main.cpp	/^namespace spec {$/;"	n	file:
stack_	archive/fl/rpn.cpp	/^  std::stack<int> stack_;$/;"	m	class:RPNProcessor	file:
start_consuming	archive/tweetsenti/messaging.py	/^    def start_consuming(self):$/;"	m	class:SimpleSubscriber
stats	archive/top_ten_symbols/main.cpp	/^  const StatsType & stats() const {$/;"	f	class:Book
stream	archive/tweetsenti/pub.py	/^    def stream(self, track, listener):$/;"	m	class:TwitterClient
symbol	archive/qu/main.cpp	/^  Symbol symbol;$/;"	m	struct:SymbolStats	file:
symbol	archive/top_ten_symbols/main.cpp	/^  Symbol symbol() const {$/;"	f	struct:SimpleOrderBook
symbol_	archive/top_ten_symbols/main.cpp	/^  const Symbol symbol_;$/;"	m	struct:SimpleOrderBook	file:
symbol_book_	archive/top_ten_symbols/main.cpp	/^  SymbolBookTable symbol_book_;$/;"	m	class:Book	file:
t_	archive/th/tests/test.cpp	/^   T t_;$/;"	m	class:Foo	file:
test_basic	archive/th/tests/mars_ut.py	/^def test_basic(init_pos, commands, expected_pos):$/;"	f
test_header	archive/th/tests/mars_ut.py	/^def test_header():$/;"	f
time_foo	archive/to/perfect_forward.cpp	/^auto time_foo(T&& param) {$/;"	f
time_it	archive/to/perfect_forward.cpp	/^auto time_it(Func&& func, Params &&... params)$/;"	f
timed_order_import	archive/orders/python/load_orders.py	/^def timed_order_import(file_name, log, batch_size):$/;"	f
top_of_ask	archive/matching_engine/main.cpp	/^  LevelInfo top_of_ask() const {$/;"	f	class:Side::OrderType::DepthBook
top_of_bid	archive/matching_engine/main.cpp	/^  LevelInfo top_of_bid() const {$/;"	f	class:Side::OrderType::DepthBook
top_ten_	archive/top_ten_symbols/main.cpp	/^  StatsType top_ten_;$/;"	m	class:Book	file:
total_price	archive/qu/main.cpp	/^  Price total_price;$/;"	m	struct:SymbolStats	file:
total_shares	archive/matching_engine/main.cpp	/^  int total_shares = 0;$/;"	m	struct:Side::OrderType::PriceLevel	file:
total_shares	archive/simple_order_book/main.cpp	/^  int total_shares = 0;$/;"	m	struct:PriceLevel	file:
trade	archive/top_ten_symbols/main.cpp	/^  namespace trade {$/;"	n	namespace:spec	file:
transfer_to	archive/ts/atm/main.cpp	/^  uint32_t transfer_to(Account & rhs, uint32_t amount) {$/;"	f	struct:AccountType::Account
turn_left	archive/th/mars.py	/^    def turn_left(self):$/;"	m	class:Header
turn_right	archive/th/mars.py	/^    def turn_right(self):$/;"	m	class:Header
type	archive/ts/atm/main.cpp	/^  AccountType type() {$/;"	f	struct:AccountType::Account
type	archive/ts/atm/main.cpp	/^  static const AccountType type = AccountType::checking;$/;"	m	class:AccountType::CheckingAccount	file:
type	archive/ts/atm/main.cpp	/^  static const AccountType type = AccountType::saving;$/;"	m	class:AccountType::SavingAccount	file:
update	archive/top_ten_symbols/main.cpp	/^  void update(const Symbol & symbol, uint32_t volume) {$/;"	f	class:TopVolumesRank
update_data	archive/tweetsenti/plot.py	/^    def update_data(self, index, senti):$/;"	m	class:SentimentGraph
upper	archive/th/tests/test.cpp	/^    int upper;$/;"	m	class:Test	file:
user_id	archive/ts/atm/atm.cpp	/^  int user_id;$/;"	m	struct:Account	file:
val	archive/ts/atm/test.cpp	/^  int val;$/;"	m	struct:Test	file:
value	archive/lu/is_same.cpp	/^  static constexpr T value = v;$/;"	m	struct:integral_constant	file:
volume	archive/top_ten_symbols/main.cpp	/^  Volume volume() const {$/;"	f	struct:SimpleOrderBook
volume_	archive/top_ten_symbols/main.cpp	/^  Volume volume_;$/;"	m	struct:SimpleOrderBook	file:
volumes	archive/qu/main.cpp	/^  Shares volumes;$/;"	m	struct:SymbolStats	file:
withdraw	archive/ts/atm/main.cpp	/^  uint32_t withdraw(uint32_t amount) {$/;"	f	struct:AccountType::ATM
withdraw	archive/ts/atm/main.cpp	/^  uint32_t withdraw(uint32_t amount) {$/;"	f	struct:AccountType::Account
write	archive/lu/pub_sub.cpp	/^  void write(int payload) {$/;"	f	class:Producer
y	archive/th/tests/test.cpp	/^  double y = 2.1715;$/;"	m	namespace:second	file:
y	archive/th/tests/test.cpp	/^  int y = 8;$/;"	m	namespace:first	file:
~Simple_SP	archive/lu/pointer.cpp	/^  ~Simple_SP() {$/;"	f	class:Simple_SP
~Test	archive/lu/pointer.cpp	/^  ~Test() {$/;"	f	struct:Test
~Test	archive/lu/test.cpp	/^  ~Test() {$/;"	f	struct:Test
